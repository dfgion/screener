import aio_pika
import asyncio
import logging

from aiogram import Router
from aiogram.filters.command import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from ..statesgroup import MenuStatesGroup, ChangeStatesGroup
from ..markups.reply import timeframes_kb, skip_kb
from ..markups.inline import menu_kb
from ..config import bot, Config


router = Router()

@router.message(Command('start'))
async def start(message: Message, state: FSMContext):
    print('You in start')
    curr = await state.get_state()
    if (curr in MenuStatesGroup) or (curr in ChangeStatesGroup):
        pass
    else:
        logging.basicConfig(level=logging.INFO, filename="py_log_bot.log",filemode="w",
                    format="%(asctime)s %(levelname)s %(message)s")
        try:
            task = asyncio.create_task(rabbit_connection_screener())
        except Exception as e:
            logging.error(e)
        await message.answer(text='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –±–æ—Ç–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è', reply_markup=skip_kb)
        await message.answer(text='–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É —Ä–æ—Å—Ç–∞. (–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ 1) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–Ω–∏–∑—É', reply_markup=skip_kb)
        await state.set_state(MenuStatesGroup.percent_long)
        
@router.message(MenuStatesGroup.percent_long)        
async def get_percent(message: Message, state: FSMContext):
    if message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await state.update_data({'percent_long': '0', 'timeframe_long': '0'})
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –ø–µ—Ä–∏–æ–¥—É –ø—Ä–æ—Å–∞–¥–∫–∏. (–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ -1) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–Ω–∏–∑—É', reply_markup=skip_kb)
        await state.set_state(MenuStatesGroup.percent_short)
    else:
        try:
            if float(message.text) < 1:
                raise Exception('Unsupported number')
            await state.update_data({'percent_long': message.text})
            await message.answer(f'–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –¥–∞–ª–µ–µ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è. (–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ 10)')
            await state.set_state(MenuStatesGroup.timeframe_long)
        except Exception:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ 1!')
        
@router.message(MenuStatesGroup.timeframe_long)
async def get_timeframe(message: Message, state: FSMContext):
    try:
        if float(message.text) < 10:
            raise Exception('Unsupported number')
        await state.update_data({'timeframe_long': message.text})
        await message.answer(f'–í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–∞–¥–∫–∏')
        await message.answer('–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –¥–∞–ª–µ–µ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –ø–µ—Ä–∏–æ–¥—É –ø—Ä–æ—Å–∞–¥–∫–∏. (–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ -1) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–Ω–∏–∑—É', reply_markup=skip_kb)
        await state.set_state(MenuStatesGroup.percent_short)
    except:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ 10!')
             
@router.message(MenuStatesGroup.percent_short)        
async def get_percent(message: Message, state: FSMContext):
    if message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await state.update_data({'percent_short': '0', 'timeframe_short': '0'})
        await state.set_state(MenuStatesGroup.menu)
        await message.answer('–ú–µ–Ω—é\n\nüõ†–ò–∑–º–µ–Ω–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –±–æ—Ç\nüõ†–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –±–æ—Ç\n‚ñ∂Ô∏è–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Å–∏–≥–Ω–∞–ª–æ–≤', reply_markup=menu_kb)
    else:
        try:
            if float(message.text) > -1:
                raise Exception('Unsupported number')
            await state.update_data({'percent_short': message.text})
            await message.answer(f'–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å–∞–¥–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –¥–∞–ª–µ–µ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è.(–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ 10)')
            await state.set_state(MenuStatesGroup.timeframe_short)
        except Exception:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ -1!')
    
@router.message(MenuStatesGroup.timeframe_short)
async def get_timeframe(message: Message, state: FSMContext):
    try:
        if float(message.text) < 10:
            raise Exception('Unsupported number')
        await state.update_data({'timeframe_short': message.text})
        await message.answer(f'–í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø—Ä–æ—Å–∞–¥–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –º–µ–Ω—é...')
        await message.answer('–ú–µ–Ω—é\n\nüõ†–ò–∑–º–µ–Ω–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –±–æ—Ç\nüõ†–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –±–æ—Ç\n‚ñ∂Ô∏è–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Å–∏–≥–Ω–∞–ª–æ–≤', reply_markup=menu_kb)
        await state.set_state(MenuStatesGroup.menu)
    except:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ 10!')
    
@router.callback_query(MenuStatesGroup.menu)    
async def change_options(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    logging.info(f'{data}')
    if callback_query.data == 'change_long':
        if data.get('scan'):
            await callback_query.answer(text='–°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')
        else:
            await bot.send_message(chat_id=callback_query.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É —Ä–æ—Å—Ç–∞. (–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ 1) –∏–ª–∏ 0, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Ç–∞')
            await state.set_state(ChangeStatesGroup.change_long)
    elif callback_query.data == 'change_short':
        if data.get('scan'):
            await callback_query.answer(text='–°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')
        else:
            await bot.send_message(chat_id=callback_query.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É –ø—Ä–æ—Å–∞–¥–∫–∏. (–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ -1) –∏–ª–∏ 0, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–∞–¥–∫–∏')
            await state.set_state(ChangeStatesGroup.change_short)
    elif callback_query.data == 'start_scan':
        if (data.get('long') or data.get('short')):
            await bot.send_message(chat_id=callback_query.from_user.id, text='–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –Ω–∞—á–∞–ª–æ—Å—å')
        else:
            if (float(data['percent_long']) > 0) and (float(data['percent_short']) < 0):
                await state.update_data({'long': True, 'short': True})
                await bot.send_message(chat_id=callback_query.from_user.id, text=f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Ç–∞ –Ω–∞—á–∞–ª–æ—Å—å, –æ–∂–∏–¥–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª–æ–≤\n üïò–í—Ä–µ–º—è: {data['timeframe_long']}m\n üìà–ü—Ä–æ—Ü–µ—Ç: {data['percent_long']}%")
                await bot.send_message(chat_id=callback_query.from_user.id, text=f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–∞–¥–∫–∏ –Ω–∞—á–∞–ª–æ—Å—å, –æ–∂–∏–¥–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª–æ–≤\n üïò–í—Ä–µ–º—è: {data['timeframe_short']}m\n üìâ–ü—Ä–æ—Ü–µ—Ç: {data['percent_short']}%")
                await asyncio.gather(
                    publisher_scneener(data=f"{data['timeframe_long']},{data['percent_long']} start", routing='tgbybit_long'), 
                    publisher_scneener(data=f"{data['timeframe_short']},{data['percent_short']} start", routing='tgbybit_short')
                    )
            elif float(data['percent_long']) > 0:
                await state.update_data({'long': True, 'short': False})
                await publisher_scneener(data=f"{data['timeframe_long']},{data['percent_long']} start", routing='tgbybit_long')
                await bot.send_message(chat_id=callback_query.from_user.id, text=f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Ç–∞ –Ω–∞—á–∞–ª–æ—Å—å, –æ–∂–∏–¥–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª–æ–≤\nüïò –í—Ä–µ–º—è: {data['timeframe_long']}m\n üìà–ü—Ä–æ—Ü–µ—Ç: {data['percent_long']}%")
            elif float(data['percent_short']) < 0:
                await state.update_data({'long': False, 'short': True})
                await publisher_scneener(data=f"{data['timeframe_short']},{data['percent_short']} start", routing='tgbybit_short')
                await bot.send_message(chat_id=callback_query.from_user.id, text=f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–∞–¥–∫–∏ –Ω–∞—á–∞–ª–æ—Å—å, –æ–∂–∏–¥–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª–æ–≤\n üïò–í—Ä–µ–º—è: {data['timeframe_short']}m\n üìâ–ü—Ä–æ—Ü–µ—Ç: {data['percent_short']}%")
            else:
                await bot.send_message(chat_id=callback_query.from_user.id, text='üõ†–ó–∞–¥–∞–π—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ—Å–∞–¥–∫–∏ –∏–ª–∏ —Ä–æ—Å—Ç–∞')
    elif callback_query.data == 'stop_scan':
        # print(data)
        if (data.get('long') and data.get('short')):
            await state.update_data({'short': False, 'long': False})
            logging.info('Before stopping')
            await publisher_scneener(data=f'0,0 stop', routing='tgbybit_long')
            await publisher_scneener(data=f'0,0 stop', routing='tgbybit_short')
            logging.info('After stopping')
            await bot.send_message(chat_id=callback_query.from_user.id, text='‚ùå –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–∞–¥–∫–∏ –∏ —Ä–æ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
        elif data.get('long'):
            logging.info('Stop only long')
            await state.update_data({'long': False})
            await publisher_scneener(data=f'0,0 stop', routing='tgbybit_long')
            await bot.send_message(chat_id=callback_query.from_user.id, text='‚ùå –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
        elif data.get('short'):
            logging.info('Stop only short ')
            await state.update_data({'short': False})
            await publisher_scneener(data=f'0,0 stop', routing='tgbybit_short')
            await bot.send_message(chat_id=callback_query.from_user.id, text='‚ùå –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–∞–¥–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
        else:
            await bot.send_message(chat_id=callback_query.from_user.id, text=f'üò≥ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ')
    elif callback_query.data == 'options':
        logging.info(data.get('percent_short'))
        if (data.get('percent_short') is not None) and (data.get('percent_short') != '0'):
            short = '‚úÖ'
            time_short = data.get('timeframe_short')
            percent_short = data.get('percent_short')
        else:
            short = '‚ùå'
            time_short = '‚ùå'
            percent_short = '‚ùå'
        logging.info(data.get('percent_long'))
        if (data.get('percent_long') is not None) and (data.get('percent_long') != '0'):
            long = '‚úÖ'
            time_long = data.get('timeframe_long')
            percent_long = data.get('percent_long')
        else:
            long = '‚ùå'
            time_long = '‚ùå'
            percent_long = '‚ùå'
        await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                    message_id=callback_query.message.message_id,
                                    text=f'–ú–µ–Ω—é\n\nüõ†–ò–∑–º–µ–Ω–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –±–æ—Ç\nüõ†–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –±–æ—Ç\n‚ñ∂Ô∏è–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Å–∏–≥–Ω–∞–ª–æ–≤\n\n–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n–ü—Ä–æ—Å–∞–¥–∫–∞:{short}\n–í—Ä–µ–º—è: {time_short}\n–ü—Ä–æ—Ü–µ–Ω—Ç: {percent_short}\n\n–†–æ—Å—Ç: {long}\n–í—Ä–µ–º—è: {time_long}\n–ü—Ä–æ—Ü–µ–Ω—Ç: {percent_long}', 
                                    reply_markup=menu_kb)
    
@router.message(ChangeStatesGroup.change_long)
async def change_percent(message: Message, state: FSMContext):
    try:
        if (float(message.text) < 1) and (float(message.text) != 0):
            raise Exception('Unsupported number')
        await state.update_data({'percent_long': message.text})
        if float(message.text) == 0:
            await message.answer(f'–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Ç–∞ –≤—ã–∫–ª—é—á–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –º–µ–Ω—é...')
            await state.set_state(MenuStatesGroup.menu)
            await message.answer('–ú–µ–Ω—é\n\nüõ†–ò–∑–º–µ–Ω–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –±–æ—Ç\nüõ†–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –±–æ—Ç\n‚ñ∂Ô∏è–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Å–∏–≥–Ω–∞–ª–æ–≤', reply_markup=menu_kb)
        else:
            await message.answer(f'–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –¥–∞–ª–µ–µ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è. (–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ 10)')
            await state.set_state(ChangeStatesGroup.change_time_long)
    except Exception:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ 1!')
        
@router.message(ChangeStatesGroup.change_short)
async def change_percent(message: Message, state: FSMContext):
    try:
        if (float(message.text) > -1) and (float(message.text) != 0):
            raise Exception('Unsupported number')
        await state.update_data({'percent_short': message.text})
        if float(message.text) == 0:
            await message.answer(f'–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–∞–¥–∫–∏ –≤—ã–∫–ª—é—á–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –º–µ–Ω—é...')
            await state.set_state(MenuStatesGroup.menu)
            await message.answer('–ú–µ–Ω—é\n\nüõ†–ò–∑–º–µ–Ω–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –±–æ—Ç\nüõ†–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –±–æ—Ç\n‚ñ∂Ô∏è–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Å–∏–≥–Ω–∞–ª–æ–≤', reply_markup=menu_kb)
        else:
            await message.answer(f'–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å–∞–¥–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –¥–∞–ª–µ–µ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è. (–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ 10)')
            await state.set_state(ChangeStatesGroup.change_time_short)
    except Exception:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ -1!')
        
@router.message(ChangeStatesGroup.change_time_long)
async def get_timeframe(message: Message, state: FSMContext):
    try:
        if float(message.text) < 10:
            raise Exception('Unsupported number')
        await state.update_data({'timeframe_long': message.text})
        await state.set_state(MenuStatesGroup.menu)
        data = await state.get_data()
        # print(data)
        await message.answer('–ú–µ–Ω—é\n\nüõ†–ò–∑–º–µ–Ω–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –±–æ—Ç\nüõ†–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –±–æ—Ç\n‚ñ∂Ô∏è–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Å–∏–≥–Ω–∞–ª–æ–≤', reply_markup=menu_kb)
    except:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ 10!')
        
@router.message(ChangeStatesGroup.change_time_short)
async def get_timeframe(message: Message, state: FSMContext):
    try:
        if float(message.text) < 10:
            raise Exception('Unsupported number')
        await state.update_data({'timeframe_short': message.text})
        await message.answer(f'–í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–∞–¥–∫–∏')
        await state.set_state(MenuStatesGroup.menu)
        data = await state.get_data()
        # print(data)
        await message.answer('–ú–µ–Ω—é\n\nüõ†–ò–∑–º–µ–Ω–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –±–æ—Ç\nüõ†–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –±–æ—Ç\n‚ñ∂Ô∏è–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Å–∏–≥–Ω–∞–ª–æ–≤', reply_markup=menu_kb)
    except:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ 10!')
    
    
    
async def publisher_scneener(data: str, routing: str):
    connection = await aio_pika.connect_robust(f"amqp://{Config.rmuser}:{Config.rmpassword}@{Config.hostname}:5672/")
    if routing == 'tgbybit_short':
        logging.info('message to short is sending')
    if routing == 'tgbybit_long':
        logging.info('message to long is sending')
    channel = await connection.channel()
    await channel.default_exchange.publish(
        aio_pika.Message(body=data.encode()),
        routing_key=routing
    )
    await connection.close()
    
async def rabbit_connection_screener():
    logging.info('Connection is set')
    async def callback(message: aio_pika.IncomingMessage):
        async with message.process():
            name, timeframe, delta_percent, delta_price, count_signal = message.body.decode().split() # message format is "{name} {timeframe} {delta_percent} {delta_price} {count_signal}"
            if int(count_signal) <= 4:
                try:
                    if round(float(delta_percent), 2) < 0:
                        await bot.send_message(chat_id=Config.chat_id, text=f'ü™ô–°–∏–≥–Ω–∞–ª –ø–æ {name}--{timeframe}m\nüìâ–ü—Ä–æ—Ü–µ—Ç OI: {round(float(delta_percent), 2)}%\nüí≤–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {round(float(delta_price), 2)}%\nC–∏–≥–Ω–∞–ª –ø–æ —Å—á–µ—Ç—É {count_signal}')
                    else:
                        await bot.send_message(chat_id=Config.chat_id, text=f'ü™ô–°–∏–≥–Ω–∞–ª –ø–æ {name}--{timeframe}m\nüìà–ü—Ä–æ—Ü–µ—Ç OI: {round(float(delta_percent), 2)}%\nüí≤–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {round(float(delta_price), 2)}%\nC–∏–≥–Ω–∞–ª –ø–æ —Å—á–µ—Ç—É {count_signal}')
                except:
                    await asyncio.sleep(5)
                    if round(float(delta_percent), 2) < 0:
                        await bot.send_message(chat_id=Config.chat_id, text=f'ü™ô–°–∏–≥–Ω–∞–ª –ø–æ {name}--{timeframe}m\nüìâ–ü—Ä–æ—Ü–µ—Ç OI: {round(float(delta_percent), 2)}%\nüí≤–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {round(float(delta_price), 2)}%\nC–∏–≥–Ω–∞–ª –ø–æ —Å—á–µ—Ç—É {count_signal}')
                    else:
                        await bot.send_message(chat_id=Config.chat_id, text=f'ü™ô–°–∏–≥–Ω–∞–ª –ø–æ {name}--{timeframe}m\nüìà–ü—Ä–æ—Ü–µ—Ç OI: {round(float(delta_percent), 2)}%\nüí≤–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {round(float(delta_price), 2)}%\nC–∏–≥–Ω–∞–ª –ø–æ —Å—á–µ—Ç—É {count_signal}')
    
    connection = await aio_pika.connect_robust(f'amqp://{Config.rmuser}:{Config.rmpassword}@{Config.hostname}:5672/')
    async with connection:
        channel = await connection.channel()
        queue = await channel.declare_queue(name='bybittg')
        await queue.consume(callback=callback)
        try:
            await asyncio.Future()
        finally:
            logging.info('Connection was closed')
            await connection.close()
        
        